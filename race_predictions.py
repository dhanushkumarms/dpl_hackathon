# -*- coding: utf-8 -*-
"""Welcome to Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb

# **Team Hackterz - DPL** (Data Premier League)

*   22z317 - Dhanushkumar
*   22z331 - Jeyanth V P
*   22z332 - Jothiswarar S

**Step 1 :** Loading necessary libraries for data processing, visualization, and machine learning.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

"""**Step 2 :** Loading multiple CSV files containing Formula 1 race data."""

print("Loading datasets...")
circuit_data = pd.read_csv('/content/circuits.csv')
constructor_data = pd.read_csv('/content/constructors.csv')
driver_standings_data = pd.read_csv('/content/driver_standings.csv')
driver_data = pd.read_csv('/content/drivers.csv')
lap_times_data = pd.read_csv('/content/lap_times.csv')
pit_stops_data = pd.read_csv('/content/pit_stops.csv')
qualifying_data = pd.read_csv('/content/qualifying.csv')
race_data = pd.read_csv('/content/races.csv')
results_data = pd.read_csv('/content/results.csv')
constructor_standings_data = pd.read_csv('/content/constructor_standings.csv')
season_data = pd.read_csv('/content/seasons.csv')
sprint_results_data = pd.read_csv('/content/sprint_results.csv')
status_data = pd.read_csv('/content/status.csv')
print("Datasets Loaded Successfully.!")

"""**Step 3 :** Combining data from multiple sources into a single DataFrame for training."""

print("Merging datasets...")
df = results_data.merge(driver_data, on='driverId', suffixes=('', '_driver'))
df = df.merge(constructor_data, on='constructorId', suffixes=('', '_constructor'))
df = df.merge(race_data, on='raceId', suffixes=('', '_race'))
df = df.merge(driver_standings_data, on=['raceId', 'driverId'], how='left', suffixes=('', '_standings'))
df = df.merge(lap_times_data, on=['raceId', 'driverId'], how='left', suffixes=('', '_lap'))
df = df.merge(pit_stops_data, on=['raceId', 'driverId'], how='left', suffixes=('', '_pit'))
df = df.merge(qualifying_data, on=['raceId', 'driverId'], how='left', suffixes=('', '_qualifying'))
df = df.merge(sprint_results_data, on=['raceId', 'driverId'], how='left', suffixes=('', '_sprint'))
print("Merging Successful.!")

"""**Step 4 :** Creating new data columns to improve model predictions."""

print("Feature Engineering...")

print("Checking data types...")
print(df.dtypes)

df['points'] = pd.to_numeric(df['points'], errors='coerce')
df['wins'] = pd.to_numeric(df['wins'], errors='coerce')
df['milliseconds'] = pd.to_numeric(df['milliseconds'], errors='coerce')

df.fillna(0, inplace=True)

df['driver_experience'] = 2024 - pd.to_datetime(df['dob'], errors='coerce').dt.year
df['team_strength'] = df.groupby('constructorId')['points'].transform('mean')
df['driver_performance'] = df.groupby('driverId')['points'].transform('mean')
df['grid_advantage'] = df['grid'].apply(lambda x: 1 if x <= 5 else 0)
df['win_ratio'] = df.groupby('driverId')['wins'].transform('mean')
df['avg_lap_time'] = df.groupby('driverId')['milliseconds'].transform('mean')
df['pit_stop_count'] = df.groupby('driverId')['stop'].transform('count')

df.fillna(0, inplace=True)

"""**Step 5 :** Training an XGBoost model using engineered features."""

print("Preparing training data...")
features = ['grid', 'driver_experience', 'team_strength', 'driver_performance', 'grid_advantage', 'win_ratio', 'avg_lap_time', 'pit_stop_count']
target = 'positionOrder'

X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training XGBoost Model...")
model = xgb.XGBRegressor(n_estimators=400, learning_rate=0.07, max_depth=5, random_state=42)
model.fit(X_train, y_train)
print("Model Trained Successfully.!")

"""**Step 6 :** Checking model accuracy using various metrics."""

print("Making Predictions...\n")
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'MAE: {mae}\n')
print(f'RMSE: {rmse}\n')
print(f'R^2 Score: {r2}\n')

"""Step 7 : Visualizing every

**VIZ 1 :** Shows which features impact race results most.
"""

plt.figure(figsize=(10, 6))
xgb.plot_importance(model)
plt.title('Feature Importance')
plt.show()

"""**VIZ 2 :** Compares predicted and actual race results."""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.xlabel('Actual Position')
plt.ylabel('Predicted Position')
plt.title('Actual vs Predicted Race Positions')
plt.show()

"""**VIZ 3** : Visualizes the relationship between features and race positions."""

plt.figure(figsize=(10, 6))
sns.heatmap(df[features + ['positionOrder']].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap Between Features & Position Order')
plt.show()

"""**VIZ 4 :** Visualizes the top 5 drivers' average race positions over the years."""

driver_trends = df.groupby(['year', 'driverId'])['positionOrder'].mean().reset_index()
plt.figure(figsize=(12, 6))
for driver in driver_trends['driverId'].unique()[:5]:
    subset = driver_trends[driver_trends['driverId'] == driver]
    plt.plot(subset['year'], subset['positionOrder'], marker='o', label=f'Driver {driver}')

plt.xlabel('Year')
plt.ylabel('Average Position')
plt.title('Driver Performance Trend Over Seasons')
plt.legend()
plt.gca().invert_yaxis()
plt.show()

"""**VIZ 5 :** Visualizes how constructor teams' average points have changed over seasons."""

team_trends = df.groupby(['year', 'constructorId'])['points'].mean().reset_index()
plt.figure(figsize=(12, 6))
for team in team_trends['constructorId'].unique()[:5]:  # Plot top 5 teams
    subset = team_trends[team_trends['constructorId'] == team]
    plt.plot(subset['year'], subset['points'], marker='o', label=f'Team {team}')

plt.xlabel('Year')
plt.ylabel('Average Points per Race')
plt.title('Constructor Performance Over Time')
plt.legend()
plt.show()

"""**VIZ 6 :** Shows how different circuits affect race positions."""

plt.figure(figsize=(12, 6))
sns.boxplot(x='circuitId', y='positionOrder', data=df)
plt.xlabel('Circuit ID')
plt.ylabel('Race Position')
plt.title('Track Difficulty vs Driver Performance')
plt.xticks(rotation=90)
plt.show()

"""**Step 8 :** Saving trained model for future use."""

print("Saving Model...")
joblib.dump(model, '/content/f1_xgboost_model.pkl')

print("Process Completed Successfully!")

"""# **Thank You!**"""